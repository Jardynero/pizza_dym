import 'package:firebase_analytics/firebase_analytics.dart';
import 'package:flutter/material.dart';
import 'package:pizza_dym/functions/firebase_functions.dart';
import 'package:pizza_dym/global_widgets/widgets.dart';
import 'package:pizza_dym/models/cart_model.dart';
import 'package:pizza_dym/screens/cart_screen/order_func.dart';
import 'package:provider/provider.dart';
import 'package:flutter/cupertino.dart';

class PickupScreen extends StatefulWidget {
  PickupScreen({Key? key}) : super(key: key);

  @override
  State<PickupScreen> createState() => _PickupScreenState();
}

class _PickupScreenState extends State<PickupScreen> {
  String dayOf = '';
  bool isChoseTimeOk = true;
  bool onChangedTime = false;
  int maxPickupMinutes = 20;
  int interval = 15;
  String message = '';
  String soonTimeMessage = '';
  DateTime chosenTime = DateTime.now();
  FirebaseAnalytics analytics = FirebaseAnalytics();

  @override
  Widget build(BuildContext context, {locale: const Locale('ru', 'RU')}) {
    return Scaffold(
      appBar: MainAppBar('–°–∞–º–æ–≤—ã–≤–æ–∑'),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          dateTimePicker(),
          btn(),
        ],
      ),
    );
  }

  Widget title() {
    return Column(
      children: [
        Container(
            margin: EdgeInsets.only(top: 20),
            child: Text('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞')),
        soonTime(),
      ],
    );
  }

  Widget soonTime() {
    int closingTime =
        Provider.of<CloudFirestore>(context, listen: true).closingTime;
    int openingTime =
        Provider.of<CloudFirestore>(context, listen: true).openingTime;
    return Text(
        '–ó–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ —Å $openingTime:$interval –¥–æ $closingTime:$interval');
  }

  Widget dateTimePicker() {
    return Column(
      children: [title(), dateTimeWidget()],
    );
  }

  Widget dateTimeWidget() {
    int closingTime =
        Provider.of<CloudFirestore>(context, listen: true).closingTime;
    int openingTime =
        Provider.of<CloudFirestore>(context, listen: true).openingTime;
    bool isOpen = Provider.of<CloudFirestore>(context, listen: true).isOpen;
    Map workingDays =
        Provider.of<CloudFirestore>(context, listen: true).workingDays;

    DateTime initialDateTime = DateTime.now().add(
      Duration(minutes: interval),
    );
    // –°–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π —Å–∞–º–æ–≤—ã–≤–æ–∑
    firstPickup(DateTime dt) {
      return DateTime(dt.year, dt.month, dt.day, openingTime, interval);
    }

    // –°–∞–º—ã–π –ø–æ–∑–¥–Ω–∏–π —Å–∞–º–æ–≤—ã–≤–æ–∑
    finalPickup(DateTime dt) {
      return DateTime(dt.year, dt.month, dt.day, closingTime, interval);
    }

    // —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å?
    workingDays.forEach((key, value) {
      if (value == false) {
        setState(() {
          dayOf = key;
        });
      }
    });

    return SizedBox(
      height: 250,
      width: MediaQuery.of(context).size.width,
      child: CupertinoDatePicker(
        mode: CupertinoDatePickerMode.dateAndTime,
        minimumDate: DateTime.now(),
        initialDateTime: initialDateTime,
        use24hFormat: true,
        onDateTimeChanged: (DateTime dt) {
          setState(() {
            chosenTime = dt;
          });
          if (dt.weekday.toString() == dayOf) {
            setState(() {
              message =
                  '–í —ç—Ç–æ—Ç –¥–µ–Ω—å –º—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º, –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ–ª—å–∑—è!';
              isChoseTimeOk = false;
              onChangedTime = true;
            });
          } else if (dt.day == DateTime.now().day && isOpen == false) {
            setState(() {
              message = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –º—ã –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–∫–∞–∑–æ–≤!';
              isChoseTimeOk = false;
              onChangedTime = true;
            });
          } else if (dt.isBefore(firstPickup(dt))) {
            setState(() {
              message =
                  '–í –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –º—ã –µ—â–µ –∑–∞–∫—Ä—ã—Ç—ã! –ë–ª–∏–∂–∞–π—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è ${firstPickup(dt).hour}:${firstPickup(dt).minute}';
              isChoseTimeOk = false;
              onChangedTime = true;
            });
          } else if (dt.isAfter(finalPickup(dt))) {
            setState(() {
              message =
                  '–í –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –º—ã —É–∂–µ –∑–∞–∫—Ä—ã—Ç—ã! –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∞–º–æ–≤—ã–≤–æ–∑ –≤–æ–∑–º–æ–∂–µ–Ω –≤ ${finalPickup(dt).hour}:${finalPickup(dt).minute}';
              isChoseTimeOk = false;
              onChangedTime = true;
            });
          } else if (dt.difference(initialDateTime).inMinutes < 0) {
            setState(() {
              message =
                  '–¢–∞–∫ –±—ã—Å—Ç—Ä–æ –º—ã –Ω–µ —É—Å–ø–µ–µ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑! –ë–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ ${initialDateTime.hour}:${initialDateTime.minute}';
              isChoseTimeOk = false;
              onChangedTime = true;
            });
          } else {
            setState(() {
              isChoseTimeOk = true;
              onChangedTime = true;
              message = '';
            });
          }
        },
      ),
    );
  }

  Widget btn() {
    return Container(
      margin:
          EdgeInsets.only(bottom: MediaQuery.of(context).size.height / 100 * 5),
      child: ElevatedButton(
        child: Text('–û–§–û–†–ú–ò–¢–¨ –ó–ê–ö–ê–ó',
            style: TextStyle(fontSize: 14, fontWeight: FontWeight.w600)),
        onPressed: () async {
          var cartModel = Provider.of<CartModel>(context, listen: false);
          double totalAmount = cartModel.cart.getTotalAmount();
          cartModel.getPickupChosenTime(chosenTime);
          if (onChangedTime == false) {
            ScaffoldMessenger.of(context).showSnackBar(reUsableSnackBar(
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞', context));
          } else if (isChoseTimeOk == false) {
            ScaffoldMessenger.of(context).showSnackBar(
              reUsableSnackBar(message, context),
            );
          } else {
            cartModel.saveOrderToHistory(context);
            sendOrderToTelegram(sendOrder(context));
            sendGeoToTelegram(geo(context));
            sendOrderToDeliveryMans(context);
            cartModel.sendNewOrderNumber();
            await NotificationApi.showNotification(
                title: '–ü–∏—Ü—Ü–∞ –î—ã–º',
                body:
                    '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑üçï –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø—Ä–∏—à–ª–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞!',
                payload: 'pizza dym');
            Analytics().logPurchase(totalAmount).then((value) =>
                debugPrint('log event - –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ $totalAmount'));
            showOrderConfirmation(context)
                .then((value) => cartModel.cart.deleteAllCart())
                .then((value) => Navigator.pushNamedAndRemoveUntil(
                    context, '/', (route) => false))
                .then((value) => reviewApp());
            debugPrint('–ó–∞–∫–∞–∑ –Ω–∞ —Å–∞–º–æ–≤—ã–≤–æ–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω');
            await NotificationApi.sendPushToAdmin();

            // –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
            // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–µ–ª–µ–≥—É –∑–∞–∫–∞–∑ (–≥–æ—Ç–æ–≤–æ)
            // –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–º—Å –∫–ª–∏–µ–Ω—Ç—É
            // –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É (–≥–æ—Ç–æ–≤–æ)
            // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ (–≥–æ—Ç–æ–≤–æ)
            // –ø–æ–ø–∞–ø –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫–∞–∑–µ (–≥–æ—Ç–æ–≤–æ)
            // –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é (–≥–æ—Ç–æ–≤–æ)
          }
        },
        style: ElevatedButton.styleFrom(
          primary: Color(0xff27282A),
          fixedSize: Size(
            MediaQuery.of(context).size.width / 100 * 80,
            MediaQuery.of(context).size.height / 100 * 8,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
        ),
      ),
    );
  }
}
